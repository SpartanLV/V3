{"ast":null,"code":"// frontend/src/services/socket.js\nimport { io } from 'socket.io-client';\nimport jwtDecode from 'jwt-decode';\nconst SOCKET_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nconst socket = io(SOCKET_URL, {\n  autoConnect: false,\n  withCredentials: true\n});\n\n/**\r\n * Call this once—e.g. after login—to connect and join rooms.\r\n */\nexport const setupSocket = () => {\n  const token = localStorage.getItem('token');\n  if (!token) throw new Error('JWT not found');\n  const {\n    id: userId\n  } = jwtDecode(token);\n\n  // Attach token for server auth, then connect:\n  socket.auth = {\n    token\n  };\n  socket.connect();\n  socket.on('connect', () => {\n    // join notifications + chat rooms\n    socket.emit('join-notifications', userId);\n    socket.emit('join-chat');\n  });\n  return socket;\n};\n\n/** Notification subscription */\nexport const subscribeToNotifications = cb => socket.on('new-notification', cb);\n\n/** Chat subscriptions */\nexport const subscribeToMessages = cb => socket.on('receive-message', cb);\nexport const subscribeToMessageSent = cb => socket.on('message-sent', cb);\n\n/** Send a new chat message */\nexport const sendMessageWS = (recipientId, body) => {\n  socket.emit('send-message', {\n    recipientId,\n    body\n  });\n};\n\n/** Tear down */\nexport const disconnectSocket = () => {\n  socket.disconnect();\n};","map":{"version":3,"names":["io","jwtDecode","SOCKET_URL","process","env","REACT_APP_API_URL","socket","autoConnect","withCredentials","setupSocket","token","localStorage","getItem","Error","id","userId","auth","connect","on","emit","subscribeToNotifications","cb","subscribeToMessages","subscribeToMessageSent","sendMessageWS","recipientId","body","disconnectSocket","disconnect"],"sources":["D:/Spring2025/CSE470/CSE470 Project/V3/frontend/src/services/socket.js"],"sourcesContent":["// frontend/src/services/socket.js\r\nimport { io } from 'socket.io-client';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst SOCKET_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\nconst socket = io(SOCKET_URL, {\r\n  autoConnect: false,\r\n  withCredentials: true\r\n});\r\n\r\n/**\r\n * Call this once—e.g. after login—to connect and join rooms.\r\n */\r\nexport const setupSocket = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) throw new Error('JWT not found');\r\n  const { id: userId } = jwtDecode(token);\r\n\r\n  // Attach token for server auth, then connect:\r\n  socket.auth = { token };\r\n  socket.connect();\r\n\r\n  socket.on('connect', () => {\r\n    // join notifications + chat rooms\r\n    socket.emit('join-notifications', userId);\r\n    socket.emit('join-chat');\r\n  });\r\n\r\n  return socket;\r\n};\r\n\r\n/** Notification subscription */\r\nexport const subscribeToNotifications = cb =>\r\n  socket.on('new-notification', cb);\r\n\r\n/** Chat subscriptions */\r\nexport const subscribeToMessages = cb =>\r\n  socket.on('receive-message', cb);\r\n\r\nexport const subscribeToMessageSent = cb =>\r\n  socket.on('message-sent', cb);\r\n\r\n/** Send a new chat message */\r\nexport const sendMessageWS = (recipientId, body) => {\r\n  socket.emit('send-message', { recipientId, body });\r\n};\r\n\r\n/** Tear down */\r\nexport const disconnectSocket = () => {\r\n  socket.disconnect();\r\n};\r\n"],"mappings":"AAAA;AACA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAC3E,MAAMC,MAAM,GAAGN,EAAE,CAACE,UAAU,EAAE;EAC5BK,WAAW,EAAE,KAAK;EAClBC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC/B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE,MAAM,IAAIG,KAAK,CAAC,eAAe,CAAC;EAC5C,MAAM;IAAEC,EAAE,EAAEC;EAAO,CAAC,GAAGd,SAAS,CAACS,KAAK,CAAC;;EAEvC;EACAJ,MAAM,CAACU,IAAI,GAAG;IAAEN;EAAM,CAAC;EACvBJ,MAAM,CAACW,OAAO,CAAC,CAAC;EAEhBX,MAAM,CAACY,EAAE,CAAC,SAAS,EAAE,MAAM;IACzB;IACAZ,MAAM,CAACa,IAAI,CAAC,oBAAoB,EAAEJ,MAAM,CAAC;IACzCT,MAAM,CAACa,IAAI,CAAC,WAAW,CAAC;EAC1B,CAAC,CAAC;EAEF,OAAOb,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMc,wBAAwB,GAAGC,EAAE,IACxCf,MAAM,CAACY,EAAE,CAAC,kBAAkB,EAAEG,EAAE,CAAC;;AAEnC;AACA,OAAO,MAAMC,mBAAmB,GAAGD,EAAE,IACnCf,MAAM,CAACY,EAAE,CAAC,iBAAiB,EAAEG,EAAE,CAAC;AAElC,OAAO,MAAME,sBAAsB,GAAGF,EAAE,IACtCf,MAAM,CAACY,EAAE,CAAC,cAAc,EAAEG,EAAE,CAAC;;AAE/B;AACA,OAAO,MAAMG,aAAa,GAAGA,CAACC,WAAW,EAAEC,IAAI,KAAK;EAClDpB,MAAM,CAACa,IAAI,CAAC,cAAc,EAAE;IAAEM,WAAW;IAAEC;EAAK,CAAC,CAAC;AACpD,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpCrB,MAAM,CAACsB,UAAU,CAAC,CAAC;AACrB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}