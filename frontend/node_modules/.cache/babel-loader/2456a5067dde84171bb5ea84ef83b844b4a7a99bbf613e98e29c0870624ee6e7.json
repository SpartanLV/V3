{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst Booking = require('../models/Booking');\nconst generateSlots = () => {\n  const slots = [];\n  const facilities = ['Field A', 'Field B', 'Auditorium'];\n  const today = new Date();\n  today.setHours(8, 0, 0, 0); // Start of day: 8 AM\n\n  for (let hour = 8; hour < 20; hour++) {\n    const start = new Date(today);\n    start.setHours(hour);\n    const end = new Date(today);\n    end.setHours(hour + 1);\n    facilities.forEach(facility => {\n      slots.push({\n        facility,\n        startTime: new Date(start),\n        endTime: new Date(end)\n      });\n    });\n  }\n  return slots;\n};\nrouter.get('/available-slots', async (req, res) => {\n  try {\n    const allSlots = generateSlots();\n    const existingBookings = await Booking.find({\n      startTime: {\n        $gte: new Date().setHours(0, 0, 0, 0)\n      },\n      status: {\n        $in: ['pending', 'approved']\n      }\n    });\n    const availableSlots = allSlots.filter(slot => !existingBookings.some(booking => booking.facility === slot.facility && new Date(booking.startTime).getTime() === new Date(slot.startTime).getTime()));\n    res.json(availableSlots);\n  } catch (err) {\n    res.status(500).json({\n      error: err.message\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","Booking","generateSlots","slots","facilities","today","Date","setHours","hour","start","end","forEach","facility","push","startTime","endTime","get","req","res","allSlots","existingBookings","find","$gte","status","$in","availableSlots","filter","slot","some","booking","getTime","json","err","error","message","module","exports"],"sources":["C:/Users/USER/Desktop/470 Project/rechecking/V3/frontend/src/components/AvailableSlots.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst Booking = require('../models/Booking');\r\n\r\nconst generateSlots = () => {\r\n    const slots = [];\r\n    const facilities = ['Field A', 'Field B', 'Auditorium'];\r\n    const today = new Date();\r\n    today.setHours(8, 0, 0, 0); // Start of day: 8 AM\r\n\r\n    for (let hour = 8; hour < 20; hour++) {\r\n        const start = new Date(today);\r\n        start.setHours(hour);\r\n        const end = new Date(today);\r\n        end.setHours(hour + 1);\r\n\r\n        facilities.forEach(facility => {\r\n            slots.push({\r\n                facility,\r\n                startTime: new Date(start),\r\n                endTime: new Date(end)\r\n            });\r\n        });\r\n    }\r\n    return slots;\r\n};\r\n\r\nrouter.get('/available-slots', async (req, res) => {\r\n    try {\r\n        const allSlots = generateSlots();\r\n\r\n        const existingBookings = await Booking.find({\r\n            startTime: { $gte: new Date().setHours(0, 0, 0, 0) },\r\n            status: { $in: ['pending', 'approved'] }\r\n        });\r\n\r\n        const availableSlots = allSlots.filter(slot =>\r\n            !existingBookings.some(booking =>\r\n                booking.facility === slot.facility &&\r\n                new Date(booking.startTime).getTime() === new Date(slot.startTime).getTime()\r\n            )\r\n        );\r\n\r\n        res.json(availableSlots);\r\n    } catch (err) {\r\n        res.status(500).json({ error: err.message });\r\n    }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,OAAO,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAE5C,MAAMI,aAAa,GAAGA,CAAA,KAAM;EACxB,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,UAAU,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,YAAY,CAAC;EACvD,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxBD,KAAK,CAACE,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;EAE5B,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,EAAE,EAAEA,IAAI,EAAE,EAAE;IAClC,MAAMC,KAAK,GAAG,IAAIH,IAAI,CAACD,KAAK,CAAC;IAC7BI,KAAK,CAACF,QAAQ,CAACC,IAAI,CAAC;IACpB,MAAME,GAAG,GAAG,IAAIJ,IAAI,CAACD,KAAK,CAAC;IAC3BK,GAAG,CAACH,QAAQ,CAACC,IAAI,GAAG,CAAC,CAAC;IAEtBJ,UAAU,CAACO,OAAO,CAACC,QAAQ,IAAI;MAC3BT,KAAK,CAACU,IAAI,CAAC;QACPD,QAAQ;QACRE,SAAS,EAAE,IAAIR,IAAI,CAACG,KAAK,CAAC;QAC1BM,OAAO,EAAE,IAAIT,IAAI,CAACI,GAAG;MACzB,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACA,OAAOP,KAAK;AAChB,CAAC;AAEDJ,MAAM,CAACiB,GAAG,CAAC,kBAAkB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC/C,IAAI;IACA,MAAMC,QAAQ,GAAGjB,aAAa,CAAC,CAAC;IAEhC,MAAMkB,gBAAgB,GAAG,MAAMnB,OAAO,CAACoB,IAAI,CAAC;MACxCP,SAAS,EAAE;QAAEQ,IAAI,EAAE,IAAIhB,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;MAAE,CAAC;MACpDgB,MAAM,EAAE;QAAEC,GAAG,EAAE,CAAC,SAAS,EAAE,UAAU;MAAE;IAC3C,CAAC,CAAC;IAEF,MAAMC,cAAc,GAAGN,QAAQ,CAACO,MAAM,CAACC,IAAI,IACvC,CAACP,gBAAgB,CAACQ,IAAI,CAACC,OAAO,IAC1BA,OAAO,CAACjB,QAAQ,KAAKe,IAAI,CAACf,QAAQ,IAClC,IAAIN,IAAI,CAACuB,OAAO,CAACf,SAAS,CAAC,CAACgB,OAAO,CAAC,CAAC,KAAK,IAAIxB,IAAI,CAACqB,IAAI,CAACb,SAAS,CAAC,CAACgB,OAAO,CAAC,CAC/E,CACJ,CAAC;IAEDZ,GAAG,CAACa,IAAI,CAACN,cAAc,CAAC;EAC5B,CAAC,CAAC,OAAOO,GAAG,EAAE;IACVd,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACQ,IAAI,CAAC;MAAEE,KAAK,EAAED,GAAG,CAACE;IAAQ,CAAC,CAAC;EAChD;AACJ,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGrC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}